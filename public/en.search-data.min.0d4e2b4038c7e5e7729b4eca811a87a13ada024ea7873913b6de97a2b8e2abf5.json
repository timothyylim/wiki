[{"id":0,"href":"/nextjs-twitter-auth/","title":"NextJS Authentication With Twitter","section":"","content":" NextJS Authentication With Twitter # Step 1. Install NextJS # Install NextJS\nnpx create-next-app@latest Step 2. Set up a twitter developer account # Go here: https://developer.x.com/en\nCopy and save all the credentials\nStep 3. Set up your .env file # TWITTER_CLIENT_ID=\u0026#34;\u0026lt;your code\u0026gt;\u0026#34; TWITTER_CLIENT_SECRET=\u0026#34;\u0026lt;your code\u0026gt;\u0026#34; NEXTAUTH_SECRET=\u0026#34;supersecretkey123\u0026#34; NEXTAUTH_URL=http://localhost:3000 Make sure to update the app settings. Follow this guide (I can\u0026rsquo;t be bothered to do all the screenshots right now):\nhttps://spacejelly.dev/posts/how-to-authenticate-next-js-apps-with-twitter-nextauth-js\nStep 2. Install and setup next-auth # npm install next-auth Create this file in /src/app/api/auth/[...nextauth]/route.ts\nimport NextAuth, { type NextAuthOptions } from \u0026#34;next-auth\u0026#34;; import TwitterProvider from \u0026#34;next-auth/providers/twitter\u0026#34;; import { NextResponse } from \u0026#34;next/server\u0026#34;; // Debug logs for environment variables console.log(\u0026#39;TWITTER_CLIENT_ID:\u0026#39;, process.env.TWITTER_CLIENT_ID?.slice(0, 5) + \u0026#39;...\u0026#39;); console.log(\u0026#39;TWITTER_CLIENT_SECRET:\u0026#39;, process.env.TWITTER_CLIENT_SECRET?.slice(0, 5) + \u0026#39;...\u0026#39;); const authOptions: NextAuthOptions = { providers: [ TwitterProvider({ clientId: process.env.TWITTER_CLIENT_ID as string, clientSecret: process.env.TWITTER_CLIENT_SECRET as string, version: \u0026#34;2.0\u0026#34; }), ], callbacks: { async signIn({ user, account, profile }) { try { if (!account?.providerAccountId || !user.name) { console.error(\u0026#39;Missing required user information\u0026#39;); return false; } const username = (profile as any).data.username; console.log(\u0026#39;User signed in:\u0026#39;, { name: user.name, username, providerAccountId: account.providerAccountId }); return true; } catch (error) { console.error(\u0026#39;Error in signIn callback:\u0026#39;, error); return false; } }, async session({ session, token }) { try { console.log(\u0026#39;Session created:\u0026#39;, { session, token }); return session; } catch (error) { console.error(\u0026#39;Error in session callback:\u0026#39;, error); return session; } }, async jwt({ token, account }) { if (account) { token.sub = account.providerAccountId; } console.log(\u0026#39;JWT token created:\u0026#39;, token); return token; }, }, debug: true, }; // Wrap the NextAuth handler for the App Router const handler = NextAuth(authOptions); export { handler as GET, handler as POST }; Step 3. Test the auth # Get chatgpt to make a button to test the login, it should look something like this at your homepage `src/app/page.tsx:\n\u0026#39;use client\u0026#39;; import { signIn, signOut, useSession } from \u0026#39;next-auth/react\u0026#39;; export default function Home() { const { data: session, status } = useSession(); if (status === \u0026#39;loading\u0026#39;) { return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;; } if (session) { return ( \u0026lt;div className=\u0026#34;p-8\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold mb-4\u0026#34;\u0026gt; Welcome, {session.user.name}! ðŸ‘‹ \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;mb-4\u0026#34;\u0026gt; Your Twitter username is: @{session.user.username} \u0026lt;/p\u0026gt; \u0026lt;button onClick={() =\u0026gt; signOut()} className=\u0026#34;bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded\u0026#34; \u0026gt; Sign out \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } return ( \u0026lt;div className=\u0026#34;p-8\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;text-2xl font-bold mb-4\u0026#34;\u0026gt; Welcome to the App! ðŸš€ \u0026lt;/h1\u0026gt; \u0026lt;button onClick={() =\u0026gt; signIn(\u0026#39;twitter\u0026#39;)} className=\u0026#34;bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\u0026#34; \u0026gt; Sign in with Twitter \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } Notes, don\u0026rsquo;t read:\nDrizzle is an ORM (Object Relational Mapping) which means that you don\u0026rsquo;t have to write raw SQL to interact with your database.\nYou can follow this guide:\nnext-auth\ndrizzle\ntwitter dev account\ndb\nhttps://orm.drizzle.team/docs/get-started/vercel-new\nnpm i drizzle-orm @vercel/postgres dotenv npm i -D drizzle-kit tsx https://developer.x.com/en\nhttps://next-auth.js.org/getting-started/example\nhttps://next-auth.js.org/configuration/initialization#route-handlers-app\n# nb: http not https http://localhost:3000/api/auth/callback/twitter "},{"id":1,"href":"/admin-hour/","title":"AdminHour Idea Sketch","section":"","content":" AdminHour - collaborative life admin # It\u0026rsquo;s difficult to do things like taxes alone, why don\u0026rsquo;t we do it together? As a user I want to create publicise an event for my friends to join on a zoom call and we will do our personal life admin tasks together Similar ideas: https://www.shutupwrite.com https://hypertextcollective.com "},{"id":2,"href":"/the-heart-of-every-business/","title":"At The Heart of Every Business Is An Email Chain With Too Many PDFs or A Spreadsheet That Only One Person Understands","section":"","content":" At The Heart of Every Business Is An Email Chain With Too Many PDFs or A Spreadsheet That Only One Person Understands # As far as software has come, millions of dollars still depend on either: a. Convoluted email chains that carry destiny defining PDFs b. An elaborate spreadsheet that keeps the entire state of the company\nAs the cost of programming plummets, it is not possible to build bespoke tools for companies to not have to deal with either of those two things.\nA a good piece of software unburdens knowledge workers by holding context for them. Email chains and spreadsheets hold context but they are fragile, they can and should be replaced with custom dasboards that are fun and easy to use.\n"},{"id":3,"href":"/when-to-automate/","title":"When To Automate","section":"","content":" When To Automate? # Think of software as a railroad. It is infrastructure to do heavy information transport. There are a lot of processes going on in companies, some big some small.\nYou want to find out when there\u0026rsquo;s a mismatch between the information being sent and the path it\u0026rsquo;s being sent upon. Lots video sent over emails probably means that a video uploading software should be built. When you see containers being transported on footpaths, it\u0026rsquo;s probably time to lay down the railroad.\nThere\u0026rsquo;s also a secondary point about repitition. If you\u0026rsquo;re doing something a lot, just automate it.\n"},{"id":4,"href":"/legal-software/","title":"Automating legal software","section":"","content":" Some thoughts on automating legal processes # Too many legal processes require a lot of back and forth in deep email chains where things are lost A big inspiration is Plymouth Street which is the best in class legal firm for handling immigration to the US, specifically o1 They target tech workers who have both money and an appreciation for good processes Have a look at their dashboard, see how th something as opaque as an immigration process can give clients transparency and then a feeling of security Software for legal firms already exist (https://www.mycase.com) but perhaps there is a play for jurisdiction specific automations (i.e. checking the land registry of a specific country) or making custom dashboards for a specific flow like Plymouth does "},{"id":5,"href":"/on-hypertext-curation/","title":"On Hypertext Curation","section":"","content":" On Hypertext Curation # Treating online seriously is something I\u0026rsquo;m extremely passionate about. I think writing on the web is where true breakthroughs are made whether it is in scientific discoveries outside institutions, financial analysis, journalism or personal journalling. Discovery comes from the individual and the web allows for an individual to distribute at scale.\nThe problem now becomes one of curation see Maggie Appleton\u0026rsquo;s tweet:\n\u0026ldquo;We\u0026rsquo;re in a weird limbo shift without the right cultural infrastructure to encourage, support, distribute, and curate good quality personal writing and research.\nIf people are writing thoughtful, quality things on personal sites or gardens, I don\u0026rsquo;t know how we\u0026rsquo;d ever find them.\nRSS isn\u0026rsquo;t dead. Following single sites still works. But community distribution and curation feel like the missing pieces here. Hard not to blame it all on the downfall of the Twitter algorithm. I\u0026rsquo;m trying to post on Bluesky more (http://bsky.app/profile/maggieappleton.com), but it\u0026rsquo;s still quiet and lacks the raw mass of people here.\u0026rdquo;\nhttps://x.com/Mappletons/status/1847947609421341142\nI made a prototype in 2023 that sought to address this. The user flow worked something like:\nUser adds a link (of an essay) that they would like to bookmark People following that user could see what was bookmarked Links could be organised to lists, this could be as valuable as music playlists but think of them as reading playlists that can also be shared (this is also known as social bookmarking) There are a few similar services but they fall short in my opinion:\nReddit - too noisy, too many social elements, it\u0026rsquo;s a forum not a curation site Readwise - costs money, not open source and I mean I\u0026rsquo;m a vim user and that\u0026rsquo;s just UI slop imo My dream:\nA place where you can discover great internet essays that have been bookmarked by others You can discover which lists they have been added to and find other essays that are adjacent conceptually You can build and share lists with different people and work on your own taste Create a social dynamic which encourages the scouring of the internet for little known posts - just like how the tiktok environment encourages people to find unknown songs which have a chance of having another life My inspirations:\nhttps://pinboard.in - the original bookmarking app, built after Yahoo shut down delicious Google Reader - RIP https://hypertext.joodaloop.com/ - a great hypertext library https://x.com/msimoni/status/1848454705707684158 "},{"id":6,"href":"/blogging-at-the-speed-of-thought/","title":"Blogging At The Speed of Thought","section":"","content":" Blogging At The Speed of Thought # I use Obsidian as my writing tool. It\u0026rsquo;s incredibly snappy and allows me to focus on my words instead of dealing with navigating a lot of interfaces.\nI am incredibly fast because I can just create a new file by pressing CMD + o then typing out the file name. In this case, I just typed CMD + o then wiki/blogging-at-the-speed-of-thought which creates a new file in my wiki folder.\nI then just write this post.\nNot only that, Obsidian supports vim keybindings which means I can move around my text super quickly.\nWhen I\u0026rsquo;m done, I have a command set up where I run wiki-push which does some work behind the scenes to update my Github where this blog is hosted.\nIf you want more technical details on how this setup works have a look at this article.\n"},{"id":7,"href":"/mac-shortcuts/","title":"Mac Shortcuts","section":"","content":" Mac Shortcuts # Mail # Send mail: Shift + CMD + D Archive: Ctrl + CMD + a "},{"id":8,"href":"/github-actions-to-deploy-nextjs/","title":"github actions to deploy a nextjs site with shadcn","section":"","content":" github actions to deploy a nextjs site with shadcn # This took some blood and tears so I\u0026rsquo;m just saving it here for now:\nname: Node.js CI on: push: branches: [ \u0026#34;main\u0026#34; ] jobs: build: runs-on: self-hosted strategy: matrix: node-version: [20] steps: - name: Check out code uses: actions/checkout@v4 - name: Use Node.js ${{ matrix.node-version }} uses: actions/setup-node@v4 with: node-version: ${{ matrix.node-version }} cache: \u0026#39;npm\u0026#39; - name: Install dependencies run: npm ci --legacy-peer-deps - name: Build the application run: npm run build --if-present - name: Replace /home/dev/birdseye directory with built files run: | rm -rf /home/dev/birdseye mkdir -p /home/dev/birdseye # Copy only necessary files and the build output cp -R ${{ github.workspace }}/.next /home/dev/birdseye/.next cp ${{ github.workspace }}/package.json /home/dev/birdseye/ cp ${{ github.workspace }}/package-lock.json /home/dev/birdseye/ - name: Install production dependencies on server run: | cd /home/dev/birdseye npm ci --only=production --legacy-peer-deps - name: Start or Restart PM2 run: | # Check if birdseye-app already exists if pm2 describe birdseye-app \u0026gt; /dev/null; then pm2 restart birdseye-app else pm2 start npm --name \u0026#34;birdseye-app\u0026#34; -- start --prefix /home/dev/birdseye fi pm2 save "},{"id":9,"href":"/restarting-server-with-nextjs/","title":"Restarting A Server With NextJS","section":"","content":"Restart pm2:\nRestart nginx:\nsudo service nginx restart Restart Github Actions runner:\n./svc.sh restart "},{"id":10,"href":"/nextjs-on-vps/","title":"NextJS on VPS","section":"","content":" NextJS on VPS # Notes from this video.\nAssuming that you\u0026rsquo;ve already set up your server, we can go ahead and get started.\nInstall nvm # Install nvm for managing node versions:\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash then\nsource ~/.bashrc nvm and it should work.\nInstall the latest version of node:\nnvm install --lts Install and configure nginx # Install nginx like so:\nsudo apt-get install nginx We need to configure nginx to route traffic to our app:\ncd /etc/nginx/sites-available sudo vim things server { listen 80; server_name YOUR_IP_ADDRESS; location / { proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#39;upgrade\u0026#39;; proxy_set_header Host $host; proxy_cache_bypass $http_upgrade; } } sudo ln -s /etc/nginx/sites-available/things /etc/nginx/sites-enabled/things sudo nginx -t sudo service nginx restart Get the code on the server # Repo â†’ Settings â†’ Deploy Keys\nMake an ssh key for the server:\nssh-keygen cd /home/tim cat ~/.ssh/id_ed25519.pub Paste the key into Github but do not allow write access, the server should not be able to write to the repo.\ngit clone https://github.com/timothyylim/birdseye cd birdseye npm run build Let\u0026rsquo;s test it # npm run dev and visit your domain or IP. It should work\nLetting the app live # npm i -g pm2 pm2 start npm --name \u0026#34;birdseye\u0026#34; -- run dev Other resources:\nhttps://richardkovacs.dev/blog/bring-your-own-nextjs https://mohamedyamani.com/blog/how-to-deploy-nextjs-application-to-vps-using-nginx-and-pm2/ "},{"id":11,"href":"/running-a-nextjs-app-with-pm2/","title":"Running A NextJS app with pm2","section":"","content":"npm i npm run build pm2 start npm --name \u0026#34;birdseye\u0026#34; -- run start "},{"id":12,"href":"/setting-up-an-ubuntu-server/","title":"Setting Up An Ubuntu Server","section":"","content":" Setting Up An Ubuntu Server # Provision The First User # It\u0026rsquo;s not a good idea to use root so let\u0026rsquo;s set up the main user.\nCreate the user:\n$ sudo adduser tim Add the user to the sudo group:\n$ sudo usermod -aG sudo tim Verify sudo access by switching to the tim user:\n$ su - tim Then, check if sudo access works by running a sudo command, like listing the root directory:\n$ sudoÂ lsÂ /root Now let\u0026rsquo;s make sure that you can ssh in as that user. First let\u0026rsquo;s switch to the tim user if we haven\u0026rsquo;t already:\nsu - tim Create theÂ .sshÂ directoryÂ (if it doesnâ€™t already exist) and set the appropriate permissions:\nmkdir -p ~/.ssh chmod 700 ~/.ssh Add your ssh key which is found in ~/.ssh/id_rsa.pub:\necho \u0026#34;your-public-ssh-key\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys Then set the appropriate permissions:\nchmod 600 ~/.ssh/authorized_keys and you can exit and then try to ssh in as tim.\n"},{"id":13,"href":"/arrow-symbol-mac/","title":"Arrow Symbol In Mac","section":"","content":"Go to:\nSystem Preferences \u0026gt; Keyboard \u0026gt; Text Then:\nReplace: \u0026ndash;\u0026gt; With: â†’\n"},{"id":14,"href":"/how-i-use-cursor/","title":"How I Use Cursor","section":"","content":" How I Use Cursor # Cursor is an AI powered Code Editor and although it is a fork of VSCode it differs greatly from it in being designed intentionally around AI workflows.\nThe biggest problem I had with ChatGPT was copying and pasting the context for my programming problem. Cursor solves this by actually being aware of your entire codebase which means it can also offer suggestions across multiple files.\nI use three different commands:\nCMD+k - I highlight some code and press this for surgical suggestions CMD+i - this brings up a popup window from which I can prompt, this allows me to still keep the code I\u0026rsquo;m working on in my field of vision CMD+l- this opens a sidebar where I can have longer ranging dialogues with the AI You can also press CMD+Enter to accept changes.\n"},{"id":15,"href":"/simple-fullstack-nextjs-build/","title":"Simple Fullstack NextJS build","section":"","content":" Simple Fullstack NextJS build # This is what I usually use as a baseline for my projects:\nNextJS (with the app router) Served via vercel Postgres Served via neondb Prisma ORM NextAuth, I usually use the twitter login shadcn , plain tailwind or MUI for a front end framework Might be helpful to read how to start a nextjs project as well.\nA simple exercise to get to basic fluency in NextJS could be to create an application with these components. If a user can log in and create something (even if it\u0026rsquo;s just posting some text) it will give you an idea of how a simple fullstack application works.\n"},{"id":16,"href":"/starting-a-nextjs-project/","title":"Starting A NextJS Project","section":"","content":" Starting a NextJS project # npx create-next-app@latest Set up shadcn/ui\ncd my-app npx shadcn@latest init npx shadcn@latest add button import { Button } from \u0026#34;@/components/ui/button\u0026#34; export default function Home() { return ( \u0026lt;div\u0026gt; \u0026lt;Button\u0026gt;Click me\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ) } Some notes:\n\u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;@/*\u0026#34;: [\u0026#34;src/*\u0026#34;] "},{"id":17,"href":"/tweeting-from-the-terminal/","title":"Tweeting From The Terminal","section":"","content":" Tweeting From The Terminal # I\u0026rsquo;m still working on open sourcing the code but it works something like this:\nSet up an app at developer.twitter.com Use those credentials to do local authentication I use nodejs to run an express server so auth can happen in a browser Get the tokena and save it locally, it\u0026rsquo;s long lived so it can just be reused until revoked by the user Post using token "},{"id":18,"href":"/clear-caches-drupal-7/","title":"Clear Caches Drupal 7","section":"","content":" Clear Caches Drupal 7 # Navigate to: Home -\u0026gt; Admininstration -\u0026gt; Configuration -\u0026gt; Development\nOr just click:\nhttps://64.227.118.57/?q=admin/config/development/performance\n"},{"id":19,"href":"/optimising-a-hugo-site-for-seo/","title":"Optimising A Hugo Site For SEO","section":"","content":" Optimising A Hugo Site for SEO # Let this article serve as a reference and checklist.\nHugo is a static site generator, which makes it fast and efficient, but it also means you have to ensure that youâ€™re following best SEO practices manually:\n1. Configure Basic SEO in Hugo # Page Titles and Meta Descriptions: Ensure each page has a unique, descriptive \u0026lt;title\u0026gt; tag and meta description. Use Hugoâ€™s templating system to dynamically generate meta tags in the head of each page. Add this to your head.html partial: \u0026lt;title\u0026gt;{{ .Title }} - {{ .Site.Title }}\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;H5P consultancy, H5P development, {{ .Keywords }}\u0026#34;\u0026gt; Permalinks: Ensure URLs are clean and readable by configuring permalinks in your config.toml or config.yaml. [permalinks] post = \u0026#34;/:title/\u0026#34; Use descriptive URLs that reflect your content and keywords. 2. Optimize Your Content # Keyword Research: Conduct keyword research to find the most relevant keywords for each page or blog post. Incorporate those keywords naturally into your title, headings (H1, H2), and body text. Structured Content: Organize content with proper headings (\u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;) to enhance readability and improve search engines\u0026rsquo; understanding of your content. Internal Linking: Link relevant pages or blog posts together. This helps search engines crawl your site and builds context around key topics. 3. Optimize for Speed and Mobile # Page Speed: Hugo-generated sites are usually very fast, but further optimize performance by compressing images, enabling lazy loading for images, and using a CDN. Use minified CSS and JavaScript. You can do this in Hugo with: [minify] disableHTML = false disableCSS = false disableJS = false Enable GZIP compression on your server for faster loading times. 4. Create an XML Sitemap # Hugo has built-in support for generating a sitemap. Make sure your config.toml file includes this configuration: [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;SITEMAP\u0026#34;] This will generate an sitemap.xml file at the root of your site, which helps search engines index your pages. 5. Use Schema Markup # Implement structured data to help search engines understand your content. For a blog post, you can add schema markup like this in your head.html partial: \u0026lt;script type=\u0026#34;application/ld+json\u0026#34;\u0026gt; { \u0026#34;@context\u0026#34;: \u0026#34;https://schema.org\u0026#34;, \u0026#34;@type\u0026#34;: \u0026#34;BlogPosting\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;{{ .Title }}\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;{{ .Params.author }}\u0026#34;, \u0026#34;datePublished\u0026#34;: \u0026#34;{{ .Date }}\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;{{ .Description }}\u0026#34; } \u0026lt;/script\u0026gt; Schema.org provides additional schema types you can use for reviews, articles, events, etc. 6. Set Up Canonical URLs # Avoid duplicate content issues by setting canonical URLs in the head of your pages: \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; 7. Create SEO-Friendly Blog Content # Write high-quality, long-form content that answers user queries (figure out what users might ask in search engines) Regularly update your blog with new content. Use images with descriptive alt text Use \u0026ldquo;rich snippets\u0026rdquo; for things like FAQ or How-to content to increase visibility in search results (this might be a bit overkill when thinking about how to implement it in markdown) 8. Optimize for Social Sharing (Open Graph and Twitter Cards) # Add Open Graph and Twitter meta tags to control how your content appears when shared on social media. In head.html: \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .Params.image }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; 9. Robots.txt and Noindex # Ensure that search engines are allowed to index your site by creating a robots.txt file. Use the noindex meta tag on any pages you donâ€™t want to be indexed, such as privacy policies or draft pages. 10. Monitor and Adjust SEO # Google Search Console: Submit your site and sitemap to Google Search Console to monitor performance and indexing issues. Analytics: Use Google Analytics or another tool to track traffic, bounce rates, and keyword rankings. "},{"id":20,"href":"/translating-in-your-terminal/","title":"Translating In Your Terminal","section":"","content":" Translating In Your Terminal # As a way to learn German, I write all my todos in German. It feels fitting, for some reason.\nI don\u0026rsquo;t enjoy opening up google translate so I found translate-shell.\nFor mac users:\n$ brew install translate-shell I added this to my ~/.zshrc file:\nalias t=\u0026#39;trans en:de\u0026#39; which means I can just do this in my terminal:\n$ t \u0026#39;book flight tickets\u0026#39; Flugtickets buchen Translations of book flight tickets [ English -\u0026gt; Deutsch ] book flight tickets Flugtickets buchen "},{"id":21,"href":"/adding-twitter-login-to-nextjs/","title":"Adding Twitter Login To NextJs (draft)","section":"","content":"Get Twitter keys\nDeveloper Portal User authentication settings you ahve to add \u0026ldquo;postinstall\u0026rdquo;: \u0026ldquo;prisma generate\u0026rdquo; to scripts x "},{"id":22,"href":"/editing-a-static-site-with-obsidian/","title":"Editing A Static Site With Obsidian","section":"","content":" Editing A Static Site With Obsidian # Let me tell you about how this site works because I love it.\nMy setup has two components:\nA hugo site that lives at ~/repos/wiki This particular hugo theme expects content to be in wiki/content and wiki/content/docs if it is to be shown in the sidebar An Obsidian Vault that lives at ~/repos/vault Now for the magic:\nWe do a symlink from wiki/content into ~/repos/vault which means that I can use Obsidian\u0026rsquo;s super fast file traversal to edit my personal notes as well as the wiki and most importantly feed my vim addiction!\nThe command is:\n$ ln -s ~/repos/wiki/content ~/repos/vault/wiki How cool is that!\nHow about testing and publishing?\nI\u0026rsquo;ve also udpated my .zshrc to have two nifty commands: $ wiki-serve to test the site and $ wiki-push to build and push to Github. Currently I use vercel to deploy from Github.\nMy .zshrc looks like this:\n# the brackets means that a subshell is created to cd into the directory alias wiki-serve=\u0026#39;(cd ~/repos/wiki \u0026amp;\u0026amp; hugo server)\u0026#39; alias wiki-push=\u0026#39;~/repos/configs/hugo-build-and-push.sh ~/repos/wiki\u0026#39; and the hugo-build-and-push.sh script looks like this:\n#!/bin/bash # Check if the script is being sourced (return 0 2\u0026gt;/dev/null) \u0026amp;\u0026amp; sourced=1 || sourced=0 # If the script is sourced, don\u0026#39;t execute the main functionality if [ $sourced -eq 1 ]; then echo \u0026#34;Script is being sourced. Skipping execution.\u0026#34; return 0 fi # Check if a directory is passed as an argument if [ -z \u0026#34;$1\u0026#34; ]; then echo \u0026#34;No directory provided. Usage: ./script.sh \u0026lt;directory\u0026gt;\u0026#34; exit 1 fi # Navigate to the specified directory DIRECTORY=\u0026#34;$1\u0026#34; if [ ! -d \u0026#34;$DIRECTORY\u0026#34; ]; then echo \u0026#34;The specified directory does not exist: $DIRECTORY\u0026#34; exit 1 fi cd \u0026#34;$DIRECTORY\u0026#34; || { echo \u0026#34;Failed to navigate to directory: $DIRECTORY\u0026#34;; exit 1; } echo \u0026#34;Building Hugo site in $DIRECTORY...\u0026#34; hugo echo \u0026#34;Checking for changes...\u0026#34; if git status --porcelain | grep -q .; then echo \u0026#34;Changes detected. Adding files...\u0026#34; git add . \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;Committing changes...\u0026#34; git commit -m \u0026#34;update content\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;Pushing changes to remote repository...\u0026#34; if git push \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then echo \u0026#34;Changes pushed successfully.\u0026#34; else echo \u0026#34;Failed to push changes. Please check your network connection and remote repository settings.\u0026#34; fi else echo \u0026#34;No changes detected after Hugo build.\u0026#34; fi echo \u0026#34;Script completed.\u0026#34; Notes:\nI\u0026rsquo;m still figuring out how to make images work. If you know please ping me at @wayfaring_tim!\n"},{"id":23,"href":"/edit-h5p-docs/","title":"Editing H5P docs","section":"","content":" Editing this page # Hugo setup # Let\u0026rsquo;s get it running locally first:\n$ brew install hugo $ git clone https://github.com/timothyylim/h5p-site $ cd h5p-site $ hugo serve Navigate to http://localhost:1313/ to see that it works.\nEditing the site # You can open the repo in any text editor you wish, the posts will go under /content. Note that images will go in /content too until I find a better place to put them.\nAll the posts are markdown but note that articles will need to have properties defined at the top like so:\n--- date: 2024-10-24 title: What Is H5P? --- # What is H5P? Pushing your changes # You need to build the site before updating git:\n$ hugo build $ git add . $ git commit -m \u0026#39;update site\u0026#39; $ git push You can then check h5p.timothylim.is for changes.\n"}]