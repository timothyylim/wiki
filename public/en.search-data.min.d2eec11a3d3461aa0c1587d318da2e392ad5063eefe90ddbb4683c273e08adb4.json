[{"id":0,"href":"/setting-up-an-ubuntu-server/","title":"Setting Up An Ubuntu Server","section":"","content":" Setting Up An Ubuntu Server # Provision The First User # It\u0026rsquo;s not a good idea to use root so let\u0026rsquo;s set up the main user.\nCreate the user:\n$ sudo adduser tim Add the user to the sudo group:\n$ sudo usermod -aG sudo tim Verify sudo access by switching to the tim user:\n$ su - tim Then, check if sudo access works by running a sudo command, like listing the root directory:\n$ sudo ls /root Now let\u0026rsquo;s make sure that you can ssh in as that user. First let\u0026rsquo;s switch to the tim user if we haven\u0026rsquo;t already:\nsu - tim Create the .ssh directory (if it doesn’t already exist) and set the appropriate permissions:\nmkdir -p ~/.ssh chmod 700 ~/.ssh Add your ssh key which is found in ~/.ssh/id_rsa.pub:\necho \u0026#34;your-public-ssh-key\u0026#34; \u0026gt;\u0026gt; ~/.ssh/authorized_keys Then set the appropriate permissions:\nchmod 600 ~/.ssh/authorized_keys and you can exit and then try to ssh in as tim.\n"},{"id":1,"href":"/arrow-symbol-mac/","title":"Arrow Symbol In Mac","section":"","content":"Go to:\nSystem Preferences \u0026gt; Keyboard \u0026gt; Text Then:\nReplace: \u0026ndash;\u0026gt; With: →\n"},{"id":2,"href":"/how-i-use-cursor/","title":"How I Use Cursor","section":"","content":" How I Use Cursor # Cursor is an AI powered Code Editor and although it is a fork of VSCode it differs greatly from it in being designed intentionally around AI workflows.\nThe biggest problem I had with ChatGPT was copying and pasting the context for my programming problem. Cursor solves this by actually being aware of your entire codebase which means it can also offer suggestions across multiple files.\nI use three different commands:\nCMD+k - I highlight some code and press this for surgical suggestions CMD+i - this brings up a popup window from which I can prompt, this allows me to still keep the code I\u0026rsquo;m working on in my field of vision CMD+l- this opens a sidebar where I can have longer ranging dialogues with the AI You can also press CMD+Enter to accept changes.\n"},{"id":3,"href":"/simple-fullstack-nextjs-build/","title":"Simple Fullstack NextJS build","section":"","content":" Simple Fullstack NextJS build # This is what I usually use as a baseline for my projects:\nNextJS (with the app router) Served via vercel Postgres Served via neondb Prisma ORM NextAuth, I usually use the twitter login shadcn , plain tailwind or MUI for a front end framework Might be helpful to read how to start a nextjs project as well.\nA simple exercise to get to basic fluency in NextJS could be to create an application with these components. If a user can log in and create something (even if it\u0026rsquo;s just posting some text) it will give you an idea of how a simple fullstack application works.\n"},{"id":4,"href":"/starting-a-nextjs-project/","title":"Starting A NextJS Project","section":"","content":" Starting a NextJS project # npx create-next-app@latest Set up shadcn/ui\ncd my-app npx shadcn@latest init npx shadcn@latest add button import { Button } from \u0026#34;@/components/ui/button\u0026#34; export default function Home() { return ( \u0026lt;div\u0026gt; \u0026lt;Button\u0026gt;Click me\u0026lt;/Button\u0026gt; \u0026lt;/div\u0026gt; ) } Some notes:\n\u0026#34;compilerOptions\u0026#34;: { \u0026#34;baseUrl\u0026#34;: \u0026#34;.\u0026#34;, \u0026#34;paths\u0026#34;: { \u0026#34;@/*\u0026#34;: [\u0026#34;src/*\u0026#34;] "},{"id":5,"href":"/tweeting-from-the-terminal/","title":"Tweeting From The Terminal","section":"","content":" Tweeting From The Terminal # I\u0026rsquo;m still working on open sourcing the code but it works something like this:\nSet up an app at developer.twitter.com Use those credentials to do local authentication I use nodejs to run an express server so auth can happen in a browser Get the tokena and save it locally, it\u0026rsquo;s long lived so it can just be reused until revoked by the user Post using token "},{"id":6,"href":"/clear-caches-drupal-7/","title":"Clear Caches Drupal 7","section":"","content":" Clear Caches Drupal 7 # Navigate to: Home -\u0026gt; Admininstration -\u0026gt; Configuration -\u0026gt; Development\nOr just click:\nhttps://64.227.118.57/?q=admin/config/development/performance\n"},{"id":7,"href":"/optimising-a-hugo-site-for-seo/","title":"Optimising A Hugo Site For SEO","section":"","content":" Optimising A Hugo Site for SEO # Let this article serve as a reference and checklist.\nHugo is a static site generator, which makes it fast and efficient, but it also means you have to ensure that you’re following best SEO practices manually:\n1. Configure Basic SEO in Hugo # Page Titles and Meta Descriptions: Ensure each page has a unique, descriptive \u0026lt;title\u0026gt; tag and meta description. Use Hugo’s templating system to dynamically generate meta tags in the head of each page. Add this to your head.html partial: \u0026lt;title\u0026gt;{{ .Title }} - {{ .Site.Title }}\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;H5P consultancy, H5P development, {{ .Keywords }}\u0026#34;\u0026gt; Permalinks: Ensure URLs are clean and readable by configuring permalinks in your config.toml or config.yaml. [permalinks] post = \u0026#34;/:title/\u0026#34; Use descriptive URLs that reflect your content and keywords. 2. Optimize Your Content # Keyword Research: Conduct keyword research to find the most relevant keywords for each page or blog post. Incorporate those keywords naturally into your title, headings (H1, H2), and body text. Structured Content: Organize content with proper headings (\u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt;) to enhance readability and improve search engines\u0026rsquo; understanding of your content. Internal Linking: Link relevant pages or blog posts together. This helps search engines crawl your site and builds context around key topics. 3. Optimize for Speed and Mobile # Page Speed: Hugo-generated sites are usually very fast, but further optimize performance by compressing images, enabling lazy loading for images, and using a CDN. Use minified CSS and JavaScript. You can do this in Hugo with: [minify] disableHTML = false disableCSS = false disableJS = false Enable GZIP compression on your server for faster loading times. 4. Create an XML Sitemap # Hugo has built-in support for generating a sitemap. Make sure your config.toml file includes this configuration: [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;SITEMAP\u0026#34;] This will generate an sitemap.xml file at the root of your site, which helps search engines index your pages. 5. Use Schema Markup # Implement structured data to help search engines understand your content. For a blog post, you can add schema markup like this in your head.html partial: \u0026lt;script type=\u0026#34;application/ld+json\u0026#34;\u0026gt; { \u0026#34;@context\u0026#34;: \u0026#34;https://schema.org\u0026#34;, \u0026#34;@type\u0026#34;: \u0026#34;BlogPosting\u0026#34;, \u0026#34;headline\u0026#34;: \u0026#34;{{ .Title }}\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;{{ .Params.author }}\u0026#34;, \u0026#34;datePublished\u0026#34;: \u0026#34;{{ .Date }}\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;{{ .Description }}\u0026#34; } \u0026lt;/script\u0026gt; Schema.org provides additional schema types you can use for reviews, articles, events, etc. 6. Set Up Canonical URLs # Avoid duplicate content issues by setting canonical URLs in the head of your pages: \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt; 7. Create SEO-Friendly Blog Content # Write high-quality, long-form content that answers user queries (figure out what users might ask in search engines) Regularly update your blog with new content. Use images with descriptive alt text Use \u0026ldquo;rich snippets\u0026rdquo; for things like FAQ or How-to content to increase visibility in search results (this might be a bit overkill when thinking about how to implement it in markdown) 8. Optimize for Social Sharing (Open Graph and Twitter Cards) # Add Open Graph and Twitter meta tags to control how your content appears when shared on social media. In head.html: \u0026lt;meta property=\u0026#34;og:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; \u0026lt;meta property=\u0026#34;og:image\u0026#34; content=\u0026#34;{{ .Params.image }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:card\u0026#34; content=\u0026#34;summary_large_image\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:title\u0026#34; content=\u0026#34;{{ .Title }}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;twitter:description\u0026#34; content=\u0026#34;{{ .Description }}\u0026#34;\u0026gt; 9. Robots.txt and Noindex # Ensure that search engines are allowed to index your site by creating a robots.txt file. Use the noindex meta tag on any pages you don’t want to be indexed, such as privacy policies or draft pages. 10. Monitor and Adjust SEO # Google Search Console: Submit your site and sitemap to Google Search Console to monitor performance and indexing issues. Analytics: Use Google Analytics or another tool to track traffic, bounce rates, and keyword rankings. "},{"id":8,"href":"/translating-in-your-terminal/","title":"Translating In Your Terminal","section":"","content":" Translating In Your Terminal # As a way to learn German, I write all my todos in German. It feels fitting, for some reason.\nI don\u0026rsquo;t enjoy opening up google translate so I found translate-shell.\nFor mac users:\n$ brew install translate-shell I added this to my ~/.zshrc file:\nalias t=\u0026#39;trans en:de\u0026#39; which means I can just do this in my terminal:\n$ t \u0026#39;book flight tickets\u0026#39; Flugtickets buchen Translations of book flight tickets [ English -\u0026gt; Deutsch ] book flight tickets Flugtickets buchen "},{"id":9,"href":"/adding-twitter-login-to-nextjs/","title":"Adding Twitter Login To NextJs (draft)","section":"","content":"Get Twitter keys\nDeveloper Portal User authentication settings you ahve to add \u0026ldquo;postinstall\u0026rdquo;: \u0026ldquo;prisma generate\u0026rdquo; to scripts x "},{"id":10,"href":"/editing-a-static-site-with-obsidian/","title":"Editing A Static Site With Obsidian","section":"","content":" Editing A Static Site With Obsidian # Let me tell you about how this site works because I love it.\nMy setup has two components:\nA hugo site that lives at ~/repos/wiki This particular hugo theme expects content to be in wiki/content and wiki/content/docs if it is to be shown in the sidebar An Obsidian Vault that lives at ~/repos/vault Now for the magic:\nWe do a symlink from wiki/content into ~/repos/vault which means that I can use Obsidian\u0026rsquo;s super fast file traversal to edit my personal notes as well as the wiki and most importantly feed my vim addiction!\nThe command is:\n$ ln -s ~/repos/wiki/content ~/repos/vault/wiki How cool is that!\nHow about testing and publishing?\nI\u0026rsquo;ve also udpated my .zshrc to have two nifty commands: $ wiki-serve to test the site and $ wiki-push to build and push to Github. Currently I use vercel to deploy from Github.\nMy .zshrc looks like this:\n# the brackets means that a subshell is created to cd into the directory alias wiki-serve=\u0026#39;(cd ~/repos/wiki \u0026amp;\u0026amp; hugo server)\u0026#39; alias wiki-push=\u0026#39;~/repos/configs/hugo-build-and-push.sh ~/repos/wiki\u0026#39; and the hugo-build-and-push.sh script looks like this:\n#!/bin/bash # Check if the script is being sourced (return 0 2\u0026gt;/dev/null) \u0026amp;\u0026amp; sourced=1 || sourced=0 # If the script is sourced, don\u0026#39;t execute the main functionality if [ $sourced -eq 1 ]; then echo \u0026#34;Script is being sourced. Skipping execution.\u0026#34; return 0 fi # Check if a directory is passed as an argument if [ -z \u0026#34;$1\u0026#34; ]; then echo \u0026#34;No directory provided. Usage: ./script.sh \u0026lt;directory\u0026gt;\u0026#34; exit 1 fi # Navigate to the specified directory DIRECTORY=\u0026#34;$1\u0026#34; if [ ! -d \u0026#34;$DIRECTORY\u0026#34; ]; then echo \u0026#34;The specified directory does not exist: $DIRECTORY\u0026#34; exit 1 fi cd \u0026#34;$DIRECTORY\u0026#34; || { echo \u0026#34;Failed to navigate to directory: $DIRECTORY\u0026#34;; exit 1; } echo \u0026#34;Building Hugo site in $DIRECTORY...\u0026#34; hugo echo \u0026#34;Checking for changes...\u0026#34; if git status --porcelain | grep -q .; then echo \u0026#34;Changes detected. Adding files...\u0026#34; git add . \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;Committing changes...\u0026#34; git commit -m \u0026#34;update content\u0026#34; \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 echo \u0026#34;Pushing changes to remote repository...\u0026#34; if git push \u0026gt; /dev/null 2\u0026gt;\u0026amp;1; then echo \u0026#34;Changes pushed successfully.\u0026#34; else echo \u0026#34;Failed to push changes. Please check your network connection and remote repository settings.\u0026#34; fi else echo \u0026#34;No changes detected after Hugo build.\u0026#34; fi echo \u0026#34;Script completed.\u0026#34; Notes:\nI\u0026rsquo;m still figuring out how to make images work. If you know please ping me at @wayfaring_tim!\n"},{"id":11,"href":"/edit-h5p-docs/","title":"Editing H5P docs","section":"","content":" Editing this page # Hugo setup # Let\u0026rsquo;s get it running locally first:\n$ brew install hugo $ git clone https://github.com/timothyylim/h5p-site $ cd h5p-site $ hugo serve Navigate to http://localhost:1313/ to see that it works.\nEditing the site # You can open the repo in any text editor you wish, the posts will go under /content. Note that images will go in /content too until I find a better place to put them.\nAll the posts are markdown but note that articles will need to have properties defined at the top like so:\n--- date: 2024-10-24 title: What Is H5P? --- # What is H5P? Pushing your changes # You need to build the site before updating git:\n$ hugo build $ git add . $ git commit -m \u0026#39;update site\u0026#39; $ git push You can then check h5p.timothylim.is for changes.\n"}]